1. Chan as promise
2. chan as mutex
3. wg with error
4. err group

//add go.mod


GENERAL Review
    Использование каналов как Promise: Показывает, как можно 
        использовать каналы для асинхронного выполнения запросов и ожидания результатов.
    Использование каналов как Mutex: Демонстрирует, как можно использовать 
        буферизованные каналы для синхронизации доступа к общим ресурсам.
    Работа без errgroup: Показывает, как можно реализовать групповое выполнение 
        задач с отменой через контекст и ожидание завершения с помощью sync.WaitGroup.
    Работа с errgroup: Демонстрирует использование 
        пакета golang.org/x/sync/errgroup для упрощения группового выполнения задач с возможностью отмены и обработки ошибок.

1. Chan as promise
    Этот паттерн показывает, как можно использовать каналы для асинхронного выполнения задач и ожидания результатов.

2. chan as mutex
    chanAsMutex: Функция создает буферизованный канал с размером буфера 1, что позволяет использовать его как мьютекс.
    Горутины: Каждая горутина блокирует канал перед изменением счетчика и освобождает его после завершения.
        Этот паттерн показывает, как можно использовать каналы для синхронизации доступа к общим ресурсам.

Пакет errgroup остается актуальным и полезным инструментом для работы с группами горутин в Go. Он упрощает 
управление ошибками и отменой выполнения задач, что является важным аспектом при написании конкурентного кода.