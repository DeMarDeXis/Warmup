Основные функции пакета sync/atomic
1. Атомарное сложение (AddInt64, AddUint64, etc.)
        atomic.AddInt64(&counter, 1)
            Увеличивает или уменьшает значение переменной на заданное значение атомарно.
2. Атомарное чтение (LoadInt64, LoadUint64, etc.)
        atomic.LoadInt64(&counter)
            Возвращает текущее значение переменной атомарно.
3. Атомарная запись (StoreInt64, StoreUint64, etc.)
        atomic.StoreInt64(&counter, 5)
            Устанавливает новое значение переменной атомарно.
4. Атомарная замена (SwapInt64, SwapUint64, etc.)
        atomic.SwapInt64(&counter, 10)
            Заменяет текущее значение переменной на новое и возвращает старое значение атомарно.
5. Сравнение и замена (CompareAndSwapInt64, CompareAndSwapUint64, etc.)
        atomic.CompareAndSwapInt64(&counter, 0, 1)
            Сравнивает текущее значение переменной с ожидаемым значением. 
            Если они совпадают, заменяет текущее значение на новое. Возвращает true, если замена произошла, и false в противном случае.

LoadInt64 читает текущее значение.
StoreInt64 устанавливает новое значение.
SwapInt64 заменяет текущее значение на новое и возвращает старое значение.
CompareAndSwapInt64 сравнивает текущее значение с ожидаемым (0). Если они совпадают, заменяет значение на новое (1).

atomic.Value предоставляет атомарные операции для произвольных типов данных.
Store устанавливает новое значение.
Load читает текущее значение.
Swap заменяет текущее значение на новое и возвращает старое значение.
CompareAndSwap сравнивает текущее значение с ожидаемым. Если они совпадают, заменяет значение на новое.


Атомарные операции из пакета sync/atomic предоставляют эффективный способ синхронизации доступа к переменным в многопоточной 
среде. Они могут быть использованы вместо мьютексов или каналов в тех случаях, когда 
требуется простая синхронизация чтения и записи. Однако, следует быть осторожным и использовать
их только там, где это действительно необходимо, так как неправильное использование может привести к сложным ошибкам.